#line 1 "..\\FreeRTOS\\croutine.c"



















































 

#line 1 "..\\FreeRTOS\\include\\FreeRTOS.h"



















































 







 
#line 1 "C:\\Keil\\ARM\\RV31\\Inc\\stddef.h"
 






 

 
 
 





 




#line 33 "C:\\Keil\\ARM\\RV31\\Inc\\stddef.h"

typedef signed int ptrdiff_t;


  
  typedef unsigned int size_t;








   



      typedef unsigned short wchar_t;  
#line 69 "C:\\Keil\\ARM\\RV31\\Inc\\stddef.h"



    

   









#line 90 "C:\\Keil\\ARM\\RV31\\Inc\\stddef.h"



 
#line 62 "..\\FreeRTOS\\include\\FreeRTOS.h"

 
#line 1 "..\\FreeRTOS\\include\\projdefs.h"



















































 




 
typedef void (*pdTASK_CODE)( void * );









 









#line 65 "..\\FreeRTOS\\include\\FreeRTOS.h"

 
#line 1 "..\\FreeRTOS\\FreeRTOSConfig.h"



#line 16 "..\\FreeRTOS\\FreeRTOSConfig.h"

 



#line 28 "..\\FreeRTOS\\FreeRTOSConfig.h"


 

#line 40 "..\\FreeRTOS\\FreeRTOSConfig.h"


 







 




 












#line 68 "..\\FreeRTOS\\include\\FreeRTOS.h"

 
#line 1 "..\\FreeRTOS\\include\\portable.h"



















































 



 




 


























































	



































	







	



























	








































#line 240 "..\\FreeRTOS\\include\\portable.h"

#line 248 "..\\FreeRTOS\\include\\portable.h"







#line 262 "..\\FreeRTOS\\include\\portable.h"

































	



	





 
#line 1 "..\\FreeRTOS\\portmacro.h"



















































 

















 

 
#line 80 "..\\FreeRTOS\\portmacro.h"





	typedef unsigned long portTickType;


 	

 



 	


 
extern void vPortYield( void );
extern void vPortYieldFromISR( void );



 


 

extern void vPortSetInterruptMask( void );
extern void vPortClearInterruptMask( void );
extern void vPortEnterCritical( void );
extern void vPortExitCritical( void );

#line 119 "..\\FreeRTOS\\portmacro.h"

 

 











#line 308 "..\\FreeRTOS\\include\\portable.h"

	




























#line 1 "..\\FreeRTOS\\include\\mpu_wrappers.h"



















































 





 
#line 126 "..\\FreeRTOS\\include\\mpu_wrappers.h"










#line 339 "..\\FreeRTOS\\include\\portable.h"






 



	unsigned long *pxPortInitialiseStack( unsigned long *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters );




 
void *pvPortMalloc( size_t xSize ) ;
void vPortFree( void *pv ) ;
void vPortInitialiseBlocks( void ) ;
size_t xPortGetFreeHeapSize( void ) ;




 
long xPortStartScheduler( void ) ;





 
void vPortEndScheduler( void ) ;







 











#line 71 "..\\FreeRTOS\\include\\FreeRTOS.h"



 
typedef long (*pdTASK_HOOK_CODE)( void * );









 

















































































































 
#line 215 "..\\FreeRTOS\\include\\FreeRTOS.h"



































 

	
 




	
 




	
 




	
 




	



 




	


 




	


 




	


 







 

















































































































































#line 471 "..\\FreeRTOS\\include\\FreeRTOS.h"



























#line 55 "..\\FreeRTOS\\croutine.c"
#line 1 "..\\FreeRTOS\\include\\task.h"



















































 









#line 63 "..\\FreeRTOS\\include\\task.h"
#line 1 "..\\FreeRTOS\\include\\list.h"



















































 



























 










 
struct xLIST_ITEM
{
	portTickType xItemValue;				 
	volatile struct xLIST_ITEM * pxNext;	 
	volatile struct xLIST_ITEM * pxPrevious; 
	void * pvOwner;							 
	void * pvContainer;						 
};
typedef struct xLIST_ITEM xListItem;		 

struct xMINI_LIST_ITEM
{
	portTickType xItemValue;
	volatile struct xLIST_ITEM *pxNext;
	volatile struct xLIST_ITEM *pxPrevious;
};
typedef struct xMINI_LIST_ITEM xMiniListItem;



 
typedef struct xLIST
{
	volatile unsigned long uxNumberOfItems;
	volatile xListItem * pxIndex;			 
	volatile xMiniListItem xListEnd;		 
} xList;







 








 









 








 








 




 




















 
#line 202 "..\\FreeRTOS\\include\\list.h"

















 











 











 
void vListInitialise( xList *pxList );









 
void vListInitialiseItem( xListItem *pxItem );











 
void vListInsert( xList *pxList, xListItem *pxNewListItem );



















 
void vListInsertEnd( xList *pxList, xListItem *pxNewListItem );










 
void vListRemove( xListItem *pxItemToRemove );







#line 64 "..\\FreeRTOS\\include\\task.h"







 












 
typedef void * xTaskHandle;



 
typedef struct xTIME_OUT
{
	long xOverflowCount;
	portTickType  xTimeOnEntering;
} xTimeOutType;



 
typedef struct xMEMORY_REGION
{
	void *pvBaseAddress;
	unsigned long ulLengthInBytes;
	unsigned long ulParameters;
} xMemoryRegion;



 
typedef struct xTASK_PARAMTERS
{
	pdTASK_CODE pvTaskCode;
	const signed char * const pcName;
	unsigned short usStackDepth;
	void *pvParameters;
	unsigned long uxPriority;
	unsigned long *puxStackBuffer;
	xMemoryRegion xRegions[ 1 ];
} xTaskParameters;





 









 













 













 









 









 


 






 












































































 




































































 















































 
void vTaskAllocateMPURegions( xTaskHandle xTask, const xMemoryRegion * const pxRegions ) ;







































 
void vTaskDelete( xTaskHandle pxTaskToDelete ) ;



 
















































 
void vTaskDelay( portTickType xTicksToDelay ) ;

























































 
void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement ) ;













































 
unsigned long uxTaskPriorityGet( xTaskHandle pxTask ) ;








































 
void vTaskPrioritySet( xTaskHandle pxTask, unsigned long uxNewPriority ) ;

















































 
void vTaskSuspend( xTaskHandle pxTaskToSuspend ) ;















































 
void vTaskResume( xTaskHandle pxTaskToResume ) ;


















 
long xTaskResumeFromISR( xTaskHandle pxTaskToResume ) ;



 
































 
void vTaskStartScheduler( void ) ;



















































 
void vTaskEndScheduler( void ) ;

















































 
void vTaskSuspendAll( void ) ;


















































 
signed long xTaskResumeAll( void ) ;









 
signed long xTaskIsTaskSuspended( xTaskHandle xTask ) ;



 









 
portTickType xTaskGetTickCount( void ) ;














 
portTickType xTaskGetTickCountFromISR( void ) ;












 
unsigned long uxTaskGetNumberOfTasks( void ) ;












 
signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery );
























 
void vTaskList( signed char *pcWriteBuffer ) ;






























 
void vTaskGetRunTimeStats( signed char *pcWriteBuffer ) ;



















 
void vTaskStartTrace( signed char * pcBuffer, unsigned long ulBufferSize ) ;











 
unsigned long ulTaskEndTrace( void ) ;


















 
unsigned long uxTaskGetStackHighWaterMark( xTaskHandle xTask ) ;






 
#line 1155 "..\\FreeRTOS\\include\\task.h"










 
long xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter ) ;







 
xTaskHandle xTaskGetIdleTaskHandle( void );



 










 
void vTaskIncrementTick( void ) ;





















 
void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait ) ;













 
void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait ) ;















 
signed long xTaskRemoveFromEventList( const xList * const pxEventList ) ;








 
void vTaskSwitchContext( void ) ;



 
xTaskHandle xTaskGetCurrentTaskHandle( void ) ;



 
void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut ) ;




 
long xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait ) ;




 
void vTaskMissedYield( void ) ;




 
long xTaskGetSchedulerState( void ) ;




 
void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder ) ;




 
void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder ) ;




 
signed long xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned long uxPriority, xTaskHandle *pxCreatedTask, unsigned long *puxStackBuffer, const xMemoryRegion * const xRegions ) ;



 
unsigned long uxTaskGetTaskNumber( xTaskHandle xTask );




 
void vTaskSetTaskNumber( xTaskHandle xTask, unsigned long uxHandle );









#line 56 "..\\FreeRTOS\\croutine.c"
#line 1 "..\\FreeRTOS\\include\\croutine.h"



















































 








#line 62 "..\\FreeRTOS\\include\\croutine.h"







 
typedef void * xCoRoutineHandle;

 
typedef void (*crCOROUTINE_CODE)( xCoRoutineHandle, unsigned long );

typedef struct corCoRoutineControlBlock
{
	crCOROUTINE_CODE 		pxCoRoutineFunction;
	xListItem				xGenericListItem;	 
	xListItem				xEventListItem;		 
	unsigned long 	uxPriority;			 
	unsigned long 	uxIndex;			 
	unsigned short 		uxState;			 
} corCRCB;  








































































 
signed long xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned long uxPriority, unsigned long uxIndex );








































 
void vCoRoutineSchedule( void );





























 






























 





 
















































 
#line 322 "..\\FreeRTOS\\include\\croutine.h"



















































































 
#line 420 "..\\FreeRTOS\\include\\croutine.h"













































































 
#line 512 "..\\FreeRTOS\\include\\croutine.h"






























































































 
















































































































 










 
void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList );







 
signed long xCoRoutineRemoveFromEventList( const xList *pxEventList );





#line 57 "..\\FreeRTOS\\croutine.c"




 





 
static xList pxReadyCoRoutineLists[ ( 2 ) ];	 
static xList xDelayedCoRoutineList1;									 
static xList xDelayedCoRoutineList2;									 
static xList * pxDelayedCoRoutineList;									 
static xList * pxOverflowDelayedCoRoutineList;							 
static xList xPendingReadyCoRoutineList;											 

 
corCRCB * pxCurrentCoRoutine = 0;
static unsigned long uxTopCoRoutineReadyPriority = 0;
static portTickType xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;

 








 
#line 98 "..\\FreeRTOS\\croutine.c"




 
static void prvInitialiseCoRoutineLists( void );






 
static void prvCheckPendingReadyList( void );








 
static void prvCheckDelayedList( void );

 

signed long xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned long uxPriority, unsigned long uxIndex )
{
signed long xReturn;
corCRCB *pxCoRoutine;

	 
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
	if( pxCoRoutine )
	{
		
 
		if( pxCurrentCoRoutine == 0 )
		{
			pxCurrentCoRoutine = pxCoRoutine;
			prvInitialiseCoRoutineLists();
		}

		 
		if( uxPriority >= ( 2 ) )
		{
			uxPriority = ( 2 ) - 1;
		}

		 
		pxCoRoutine->uxState = ( 0 );
		pxCoRoutine->uxPriority = uxPriority;
		pxCoRoutine->uxIndex = uxIndex;
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;

		 
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );

		

 
		( &( pxCoRoutine ->xGenericListItem ) )->pvOwner = ( void * ) ( pxCoRoutine );
		( &( pxCoRoutine ->xEventListItem ) )->pvOwner = ( void * ) ( pxCoRoutine );
	
		 
		( &( pxCoRoutine ->xEventListItem ) )->xItemValue = ( ( ( unsigned long ) 5 ) - ( portTickType ) uxPriority );
		
		
 
		{ if( pxCoRoutine ->uxPriority > uxTopCoRoutineReadyPriority ) { uxTopCoRoutineReadyPriority = pxCoRoutine ->uxPriority; } vListInsertEnd( ( xList * ) &( pxReadyCoRoutineLists[ pxCoRoutine ->uxPriority ] ), &( pxCoRoutine ->xGenericListItem ) ); };

		xReturn = ( 1 );
	}
	else
	{		
		xReturn = ( -1 );
	}
	
	return xReturn;	
}
 

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
portTickType xTimeToWake;

	
 
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;

	

 
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );

	 
	( &( pxCurrentCoRoutine ->xGenericListItem ) )->xItemValue = ( xTimeToWake );

	if( xTimeToWake < xCoRoutineTickCount )
	{
		
 
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
	}
	else
	{
		
 
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
	}

	if( pxEventList )
	{
		
 
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
	}
}
 

static void prvCheckPendingReadyList( void )
{
	

 
	while( ( ( &xPendingReadyCoRoutineList )->uxNumberOfItems == ( unsigned long ) 0 ) == ( 0 ) )
	{
		corCRCB *pxUnblockedCRCB;

		 
		vPortSetInterruptMask();
		{	
			pxUnblockedCRCB = ( corCRCB * ) ( (&( ( (&xPendingReadyCoRoutineList) )->xListEnd ))->pxNext->pvOwner );			
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
		}
		vPortClearInterruptMask();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		{ if( pxUnblockedCRCB->uxPriority > uxTopCoRoutineReadyPriority ) { uxTopCoRoutineReadyPriority = pxUnblockedCRCB->uxPriority; } vListInsertEnd( ( xList * ) &( pxReadyCoRoutineLists[ pxUnblockedCRCB->uxPriority ] ), &( pxUnblockedCRCB->xGenericListItem ) ); };	
	}
}
 

static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
		xPassedTicks--;

		 
		if( xCoRoutineTickCount == 0 )
		{
			xList * pxTemp;

			
 
			pxTemp = pxDelayedCoRoutineList;
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		 
		while( ( ( pxDelayedCoRoutineList )->uxNumberOfItems == ( unsigned long ) 0 ) == ( 0 ) )
		{
			pxCRCB = ( corCRCB * ) ( (&( ( pxDelayedCoRoutineList )->xListEnd ))->pxNext->pvOwner );

			if( xCoRoutineTickCount < ( ( &( pxCRCB->xGenericListItem ) )->xItemValue ) )				
			{			
				 																			
				break;																				
			}																						

			vPortSetInterruptMask();
			{
				



 
				vListRemove( &( pxCRCB->xGenericListItem ) );											

				 												
				if( pxCRCB->xEventListItem.pvContainer )													
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
				}
			}
			vPortClearInterruptMask();

			{ if( pxCRCB->uxPriority > uxTopCoRoutineReadyPriority ) { uxTopCoRoutineReadyPriority = pxCRCB->uxPriority; } vListInsertEnd( ( xList * ) &( pxReadyCoRoutineLists[ pxCRCB->uxPriority ] ), &( pxCRCB->xGenericListItem ) ); };													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
}
 

void vCoRoutineSchedule( void )
{
	 
	prvCheckPendingReadyList();

	 
	prvCheckDelayedList();

	 
	while( ( ( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) )->uxNumberOfItems == ( unsigned long ) 0 ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
		{
			 
			return;
		}
		--uxTopCoRoutineReadyPriority;
	}

	
 
	{ xList * const pxConstList = ( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ); ( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext; if( ( pxConstList )->pxIndex == ( xListItem * ) &( ( pxConstList )->xListEnd ) ) { ( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext; } ( pxCurrentCoRoutine ) = ( pxConstList )->pxIndex->pvOwner; };

	 
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );

	return;
}
 

static void prvInitialiseCoRoutineLists( void )
{
unsigned long uxPriority;

	for( uxPriority = 0; uxPriority < ( 2 ); uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );

	
 
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
}
 

signed long xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
corCRCB *pxUnblockedCRCB;
signed long xReturn;

	

 
	pxUnblockedCRCB = ( corCRCB * ) ( (&( ( pxEventList )->xListEnd ))->pxNext->pvOwner );
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
	{
		xReturn = ( 1 );
	}
	else
	{
		xReturn = ( 0 );
	}

	return xReturn;
}

