#line 1 "..\\FreeRTOS\\timers.c"



















































 



 


#line 1 "..\\FreeRTOS\\include\\FreeRTOS.h"



















































 







 
#line 1 "C:\\Keil\\ARM\\RV31\\Inc\\stddef.h"
 






 

 
 
 





 




#line 33 "C:\\Keil\\ARM\\RV31\\Inc\\stddef.h"

typedef signed int ptrdiff_t;


  
  typedef unsigned int size_t;








   



      typedef unsigned short wchar_t;  
#line 69 "C:\\Keil\\ARM\\RV31\\Inc\\stddef.h"



    

   









#line 90 "C:\\Keil\\ARM\\RV31\\Inc\\stddef.h"



 
#line 62 "..\\FreeRTOS\\include\\FreeRTOS.h"

 
#line 1 "..\\FreeRTOS\\include\\projdefs.h"



















































 




 
typedef void (*pdTASK_CODE)( void * );









 









#line 65 "..\\FreeRTOS\\include\\FreeRTOS.h"

 
#line 1 "..\\FreeRTOS\\FreeRTOSConfig.h"



#line 16 "..\\FreeRTOS\\FreeRTOSConfig.h"

 



#line 28 "..\\FreeRTOS\\FreeRTOSConfig.h"


 

#line 40 "..\\FreeRTOS\\FreeRTOSConfig.h"


 







 




 












#line 68 "..\\FreeRTOS\\include\\FreeRTOS.h"

 
#line 1 "..\\FreeRTOS\\include\\portable.h"



















































 



 




 


























































	



































	







	



























	








































#line 240 "..\\FreeRTOS\\include\\portable.h"

#line 248 "..\\FreeRTOS\\include\\portable.h"







#line 262 "..\\FreeRTOS\\include\\portable.h"

































	



	





 
#line 1 "..\\FreeRTOS\\portmacro.h"



















































 

















 

 
#line 80 "..\\FreeRTOS\\portmacro.h"





	typedef unsigned long portTickType;


 	

 



 	


 
extern void vPortYield( void );
extern void vPortYieldFromISR( void );



 


 

extern void vPortSetInterruptMask( void );
extern void vPortClearInterruptMask( void );
extern void vPortEnterCritical( void );
extern void vPortExitCritical( void );

#line 119 "..\\FreeRTOS\\portmacro.h"

 

 











#line 308 "..\\FreeRTOS\\include\\portable.h"

	




























#line 1 "..\\FreeRTOS\\include\\mpu_wrappers.h"



















































 





 
#line 126 "..\\FreeRTOS\\include\\mpu_wrappers.h"










#line 339 "..\\FreeRTOS\\include\\portable.h"






 



	unsigned long *pxPortInitialiseStack( unsigned long *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters );




 
void *pvPortMalloc( size_t xSize ) ;
void vPortFree( void *pv ) ;
void vPortInitialiseBlocks( void ) ;
size_t xPortGetFreeHeapSize( void ) ;




 
long xPortStartScheduler( void ) ;





 
void vPortEndScheduler( void ) ;







 











#line 71 "..\\FreeRTOS\\include\\FreeRTOS.h"



 
typedef long (*pdTASK_HOOK_CODE)( void * );









 

















































































































 
#line 215 "..\\FreeRTOS\\include\\FreeRTOS.h"



































 

	
 




	
 




	
 




	
 




	



 




	


 




	


 




	


 







 

















































































































































#line 471 "..\\FreeRTOS\\include\\FreeRTOS.h"



























#line 60 "..\\FreeRTOS\\timers.c"
#line 1 "..\\FreeRTOS\\include\\task.h"



















































 









#line 63 "..\\FreeRTOS\\include\\task.h"
#line 1 "..\\FreeRTOS\\include\\list.h"



















































 



























 










 
struct xLIST_ITEM
{
	portTickType xItemValue;				 
	volatile struct xLIST_ITEM * pxNext;	 
	volatile struct xLIST_ITEM * pxPrevious; 
	void * pvOwner;							 
	void * pvContainer;						 
};
typedef struct xLIST_ITEM xListItem;		 

struct xMINI_LIST_ITEM
{
	portTickType xItemValue;
	volatile struct xLIST_ITEM *pxNext;
	volatile struct xLIST_ITEM *pxPrevious;
};
typedef struct xMINI_LIST_ITEM xMiniListItem;



 
typedef struct xLIST
{
	volatile unsigned long uxNumberOfItems;
	volatile xListItem * pxIndex;			 
	volatile xMiniListItem xListEnd;		 
} xList;







 








 









 








 








 




 




















 
#line 202 "..\\FreeRTOS\\include\\list.h"

















 











 











 
void vListInitialise( xList *pxList );









 
void vListInitialiseItem( xListItem *pxItem );











 
void vListInsert( xList *pxList, xListItem *pxNewListItem );



















 
void vListInsertEnd( xList *pxList, xListItem *pxNewListItem );










 
void vListRemove( xListItem *pxItemToRemove );







#line 64 "..\\FreeRTOS\\include\\task.h"







 












 
typedef void * xTaskHandle;



 
typedef struct xTIME_OUT
{
	long xOverflowCount;
	portTickType  xTimeOnEntering;
} xTimeOutType;



 
typedef struct xMEMORY_REGION
{
	void *pvBaseAddress;
	unsigned long ulLengthInBytes;
	unsigned long ulParameters;
} xMemoryRegion;



 
typedef struct xTASK_PARAMTERS
{
	pdTASK_CODE pvTaskCode;
	const signed char * const pcName;
	unsigned short usStackDepth;
	void *pvParameters;
	unsigned long uxPriority;
	unsigned long *puxStackBuffer;
	xMemoryRegion xRegions[ 1 ];
} xTaskParameters;





 









 













 













 









 









 


 






 












































































 




































































 















































 
void vTaskAllocateMPURegions( xTaskHandle xTask, const xMemoryRegion * const pxRegions ) ;







































 
void vTaskDelete( xTaskHandle pxTaskToDelete ) ;



 
















































 
void vTaskDelay( portTickType xTicksToDelay ) ;

























































 
void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement ) ;













































 
unsigned long uxTaskPriorityGet( xTaskHandle pxTask ) ;








































 
void vTaskPrioritySet( xTaskHandle pxTask, unsigned long uxNewPriority ) ;

















































 
void vTaskSuspend( xTaskHandle pxTaskToSuspend ) ;















































 
void vTaskResume( xTaskHandle pxTaskToResume ) ;


















 
long xTaskResumeFromISR( xTaskHandle pxTaskToResume ) ;



 
































 
void vTaskStartScheduler( void ) ;



















































 
void vTaskEndScheduler( void ) ;

















































 
void vTaskSuspendAll( void ) ;


















































 
signed long xTaskResumeAll( void ) ;









 
signed long xTaskIsTaskSuspended( xTaskHandle xTask ) ;



 









 
portTickType xTaskGetTickCount( void ) ;














 
portTickType xTaskGetTickCountFromISR( void ) ;












 
unsigned long uxTaskGetNumberOfTasks( void ) ;












 
signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery );
























 
void vTaskList( signed char *pcWriteBuffer ) ;






























 
void vTaskGetRunTimeStats( signed char *pcWriteBuffer ) ;



















 
void vTaskStartTrace( signed char * pcBuffer, unsigned long ulBufferSize ) ;











 
unsigned long ulTaskEndTrace( void ) ;


















 
unsigned long uxTaskGetStackHighWaterMark( xTaskHandle xTask ) ;






 
#line 1155 "..\\FreeRTOS\\include\\task.h"










 
long xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter ) ;







 
xTaskHandle xTaskGetIdleTaskHandle( void );



 










 
void vTaskIncrementTick( void ) ;





















 
void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait ) ;













 
void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait ) ;















 
signed long xTaskRemoveFromEventList( const xList * const pxEventList ) ;








 
void vTaskSwitchContext( void ) ;



 
xTaskHandle xTaskGetCurrentTaskHandle( void ) ;



 
void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut ) ;




 
long xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait ) ;




 
void vTaskMissedYield( void ) ;




 
long xTaskGetSchedulerState( void ) ;




 
void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder ) ;




 
void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder ) ;




 
signed long xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned long uxPriority, xTaskHandle *pxCreatedTask, unsigned long *puxStackBuffer, const xMemoryRegion * const xRegions ) ;



 
unsigned long uxTaskGetTaskNumber( xTaskHandle xTask );




 
void vTaskSetTaskNumber( xTaskHandle xTask, unsigned long uxHandle );









#line 61 "..\\FreeRTOS\\timers.c"
#line 1 "..\\FreeRTOS\\include\\queue.h"



















































 














#line 68 "..\\FreeRTOS\\include\\queue.h"





 
typedef void * xQueueHandle;


 



 





























































 

















































































 

















































































 



















































































 























































































 
signed long xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, long xCopyPosition );




























































































 




























































































 


































































































 
signed long xQueueGenericReceive( xQueueHandle xQueue, void * const pvBuffer, portTickType xTicksToWait, long xJustPeek );













 
unsigned long uxQueueMessagesWaiting( const xQueueHandle xQueue );












 
void vQueueDelete( xQueueHandle pxQueue );




































































 






































































 









































































 













































































 
signed long xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed long *pxHigherPriorityTaskWoken, long xCopyPosition );























































































 
signed long xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed long *pxTaskWoken );




 
signed long xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue );
signed long xQueueIsQueueFullFromISR( const xQueueHandle pxQueue );
unsigned long uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue );















 
signed long xQueueAltGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, long xCopyPosition );
signed long xQueueAltGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, long xJustPeeking );













 
signed long xQueueCRSendFromISR( xQueueHandle pxQueue, const void *pvItemToQueue, signed long xCoRoutinePreviouslyWoken );
signed long xQueueCRReceiveFromISR( xQueueHandle pxQueue, void *pvBuffer, signed long *pxTaskWoken );
signed long xQueueCRSend( xQueueHandle pxQueue, const void *pvItemToQueue, portTickType xTicksToWait );
signed long xQueueCRReceive( xQueueHandle pxQueue, void *pvBuffer, portTickType xTicksToWait );




 
xQueueHandle xQueueCreateMutex( unsigned char ucQueueType );
xQueueHandle xQueueCreateCountingSemaphore( unsigned long uxCountValue, unsigned long uxInitialCount );




 
long xQueueTakeMutexRecursive( xQueueHandle pxMutex, portTickType xBlockTime );
long xQueueGiveMutexRecursive( xQueueHandle pxMutex );




















 







 
xQueueHandle xQueueGenericCreate( unsigned long uxQueueLength, unsigned long uxItemSize, unsigned char ucQueueType );



 
void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait );








#line 62 "..\\FreeRTOS\\timers.c"
#line 1 "..\\FreeRTOS\\include\\timers.h"



















































 









#line 63 "..\\FreeRTOS\\include\\timers.h"
#line 64 "..\\FreeRTOS\\include\\timers.h"
#line 65 "..\\FreeRTOS\\include\\timers.h"







 







 

 




 
typedef void * xTimerHandle;

 
typedef void (*tmrTIMER_CALLBACK)( xTimerHandle xTimer );































































































































 
xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned long uxAutoReload, void * pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction ) ;




















 
void *pvTimerGetTimerID( xTimerHandle xTimer ) ;


































 
long xTimerIsTimerActive( xTimerHandle xTimer ) ;







 
xTaskHandle xTimerGetTimerDaemonTaskHandle( void );


















































 









































 














































































 





































 


























































































































 



















































































 





























































 







































































 




















































































 





 
long xTimerCreateTimerTask( void ) ;
long xTimerGenericCommand( xTimerHandle xTimer, long xCommandID, portTickType xOptionalValue, signed long *pxHigherPriorityTaskWoken, portTickType xBlockTime ) ;








#line 63 "..\\FreeRTOS\\timers.c"






 
